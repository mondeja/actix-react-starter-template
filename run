#!/usr/bin/env sh

: '
  App run script.

  Environment variables (default values):

  - HOST (127.0.0.1): Host used to serve the website.
  - PORT (8080): Port used to serve the website.
  - RUST_LOG (actix_web=info): Server logging level.
  - RELEASE: If not empty, build code for production environment.
  - WATCH: If not empty, watch for client and server file changes. You can not
      use in combination with RELEASE.
  - SHOW: If not empty, once the app started running, open the HOST:PORT url
      in the browser using xdg-open.
  - RECREATE: If not empty, recreate from scratch the specified environment
      compilations. Accept a comma separated string, being "server" and
      "client" the possible values.
  - DOCS: If not empty, build documentation.
  - SOURCING: If not empty, the main entry point of the script will not be
      executed, so you can source it.
'

configure_script() {
  set -e

  # environment variables
  if [ -z "$HOST" ]; then
    HOST="127.0.0.1"
  fi

  if [ -z "$PORT" ]; then
    PORT="8080"
  fi

  if [ -z "$RUST_LOG" ]; then
    RUST_LOG="actix_web=info"
  fi

  if [ "$RECREATE" = "1" ]; then
    RECREATE="server,client"
  fi

  # on production, don't watch!
  if [ -n "$RELEASE" ] && [ -n "$WATCH" ]; then
    printf "[ERROR] Don't use WATCH environment variable along with RELEASE!" >&2
    exit 1
  fi
}

info() {
  printf "%s\n" "$1"
}

build_server() {
  if printf "%s" "$RECREATE" | grep -q "server"; then
    if [ -d target ]; then
      msg="Recreating"
    else
      msg="Building"
    fi
    if [ -z "$RELEASE" ]; then
      rm -rf target/debug
    else
      rm -rf target/release
    fi
  else
    msg="Building"
  fi

  package_name="$(< Cargo.toml grep 'name = ' | head -n 1 | cut -d'"' -f2)"
  if [ -z "$RELEASE" ]; then
    msg="$msg development"
  else
    msg="$msg production"
  fi
  msg="$msg server..."
  info "$msg"

  if [ -z "$RELEASE" ]; then
    cargo build
    target_dirname="debug"
  else
    cargo build --release
    target_dirname="release"
  fi
  TARGET_BIN="./target/$target_dirname/$package_name"
  printf "\n"
}

build_client_docs() {
  if [ -n "$RELEASE" ]; then
    return
  fi

  cd client

  if printf "%s" "$RECREATE" | grep -q "client"; then
    if [ -d docs ]; then
      msg="Recreating"
    else
      msg="Building"
    fi

    rm -rf docs
  else
    msg="Building"
  fi
  info "$msg client documentation on background..."
  ./node_modules/.bin/typedoc &
  cd ..
}

build_client() {
  if [ -n "$DOCS" ]; then
    build_client_docs
  fi

  cd client

  if printf "%s" "$RECREATE" | grep -q "client"; then
    if [ -d node_modules ]; then
      msg="Recreating"
    else
      msg="Building"
    fi

    rm -rf node_modules build
  else
    msg="Building"
  fi

  if [ -z "$RELEASE" ]; then
    msg="$msg development"
  else
    msg="$msg production"
  fi
  msg="$msg client"
  if [ -n "$WATCH" ]; then
    msg="$msg on background"
  fi
  info "$msg..."

  if [ ! -d "node_modules" ]; then
    npm install
  fi

  if [ -n "$WATCH" ]; then
    # run in background (will be stopped with Ctrl+C)
    RELEASE="$RELEASE" WATCH="$WATCH" ./node_modules/.bin/webpack &
  else
    RELEASE="$RELEASE" ./node_modules/.bin/webpack
  fi
  cd ..
  printf "\n"
}

build() {
  build_server
  build_client
}

run_app() {
  info "Serving on http://$HOST:$PORT"
  if [ -n "$SHOW" ]; then
    if [ "$HOST" = "localhost" ] || [ "$(echo "$HOST" | cut -d'.' -f1)" = "127" ]; then
      prefix="http://"
    else
      prefix=""
    fi
    if [ -n "$WATCH" ]; then
      (sleep 0.7 && xdg-open "$prefix$HOST:$PORT" >/dev/null 2>&1)
    else
      xdg-open "$prefix$HOST:$PORT" >/dev/null 2>&1
    fi
  fi

  if [ -n "$WATCH" ]; then
    HOST="$HOST" PORT="$PORT" RUST_LOG="$RUST_LOG" cargo watch -- "$TARGET_BIN"
  else
    HOST="$HOST" PORT="$PORT" RUST_LOG="$RUST_LOG" "$TARGET_BIN"
  fi
}

main() {
  configure_script
  build
  run_app
}

if [ -z "$SOURCING" ]; then
  main
fi
